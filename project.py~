#!/usr/bin/env python

from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
import numpy as np
import pca

use_pca = False
pca_size = 10

mnist = input_data.read_data_sets("./MNIST_data/", one_hot=True)

if use_pca:
    x = tf.placeholder(tf.float32, [None, 28 * pca_size])
    W = tf.Variable(tf.zeros([28 * pca_size, 10]))
else:
    x = tf.placeholder(tf.float32, [None, 784])
    W = tf.Variable(tf.zeros([784, 10]))

b = tf.Variable(tf.zeros([10]))

y = tf.nn.softmax(tf.matmul(x, W) + b)

y_ = tf.placeholder(tf.float32, [None, 10])

cross_entropy = -tf.reduce_sum(y_*tf.log(y))

train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

init = tf.initialize_all_variables()

sess = tf.Session()
sess.run(init)

for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    if use_pca:
        # print batch_xs.shape
        batch_xs = np.asarray([pca.pca(m, 28, 28, pca_size) for m in batch_xs])
        # print batch_xs.shape

        sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    else:
        sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})


correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))

accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

if use_pca:
    test_data = mnist.test.images
    test_data = np.asarray([pca.pca(t, 28, 28, pca_size) for t in test_data])
    print(sess.run(accuracy, feed_dict={x: test_data, y_: mnist.test.labels}))
else:
    print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))